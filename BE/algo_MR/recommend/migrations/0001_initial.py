# Generated by Django 4.2.5 on 2023-10-04 01:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaekjoonUser',
            fields=[
                ('bj_user_id', models.AutoField(primary_key=True, serialize=False)),
                ('bj_class', models.IntegerField(blank=True, null=True)),
                ('bj_id', models.CharField(max_length=100)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('rating_by_class', models.IntegerField(blank=True, null=True)),
                ('rating_by_problem_sum', models.IntegerField(blank=True, null=True)),
                ('rating_by_solved_count', models.IntegerField(blank=True, null=True)),
                ('solved_count', models.IntegerField(blank=True, null=True)),
                ('tier', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'baekjoon_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('problem_id', models.AutoField(primary_key=True, serialize=False)),
                ('problem_level', models.IntegerField()),
                ('problem_number', models.IntegerField()),
                ('problem_tag', models.CharField(max_length=100)),
                ('solved_user_count', models.IntegerField()),
                ('title', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'problem',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProblemLike',
            fields=[
                ('problem_like_id', models.AutoField(primary_key=True, serialize=False)),
                ('like_type', models.TextField(blank=True, null=True)),
                ('memo', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'problem_like',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProblemTag',
            fields=[
                ('problem_tag_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'problem_tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RecommendProblem',
            fields=[
                ('recommend_problem_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'recommend_problem',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('season_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('promotion_season', models.TextField()),
            ],
            options={
                'db_table': 'season',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SolvedProblemHistory',
            fields=[
                ('solved_problem_history_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('solved_or_not', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'solved_problem_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('tag_name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('kakao_id', models.CharField(max_length=100)),
                ('kakao_nickname', models.CharField(max_length=50)),
                ('pre_tier', models.IntegerField()),
                ('profile_image', models.CharField(max_length=200)),
                ('refresh_token', models.CharField(max_length=100)),
                ('solved_ac_id', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserRanking',
            fields=[
                ('user_ranking_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ranking', models.IntegerField()),
                ('score', models.IntegerField()),
                ('tier', models.IntegerField()),
            ],
            options={
                'db_table': 'user_ranking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('user_status_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('wis', models.IntegerField()),
                ('con', models.IntegerField()),
                ('str', models.IntegerField()),
                ('luk', models.IntegerField()),
                ('sma', models.IntegerField()),
            ],
            options={
                'db_table': 'user_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TagCorrelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jaccard_correlation', models.FloatField()),
                ('consine_correlation', models.FloatField()),
                ('tag1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag1_correlations', to='recommend.tag')),
                ('tag2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag2_correlations', to='recommend.tag')),
            ],
            options={
                'db_table': 'tag_correlation',
            },
        ),
    ]
